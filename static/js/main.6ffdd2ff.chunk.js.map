{"version":3,"sources":["components/tableroVivify/index.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["TableroVivify","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","tasks","data","common","organizations","dataTableInitialize","console","log","$","clone","appendTo","each","i","title","text","html","on","table","column","search","value","draw","DataTable","orderCellsTop","fixedHeader","dom","buttons","sprint_backlog_column_id","id","sprint_backlog_columns","parseInt","name","sprint_id","idx","sprints","boards","doers","output","board_users","user","first_name","last_name","length","substring","_this2","map","obj","sgti","charAt","react_default","a","createElement","key","getBoardName","board_id","JSON","stringify","subtasks","getBoardColumn","getSprintName","getDoers","className","taskInfo","Component","App","url","src","logo","width","height","alt","tableroVivify_TableroVivify","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","register","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.6ffdd2ff.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport common from './../vivifyData/common.json'\r\nimport data from './../vivifyData/data.json'\r\nimport organizations from './../vivifyData/organizations.json'\r\nimport $ from 'jquery'\r\nimport 'datatables.net'\r\nimport 'datatables.net-buttons'\r\nimport 'jszip'\r\nimport 'datatables.net-buttons/js/buttons.html5.js'\r\nimport 'datatables.net-buttons/js/buttons.colVis.js'\r\nimport 'datatables.net-buttons/js/buttons.flash.js'\r\nimport 'datatables.net-buttons/js/buttons.print.js'\r\n\r\n\r\nexport default class TableroVivify extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            tasks: data.tasks,\r\n            data: data,\r\n            common: common,\r\n            organizations: organizations\r\n        };\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.dataTableInitialize();\r\n    }\r\n    dataTableInitialize () {\r\n        console.log('INITIALIZE DATABASE')\r\n        $('#tableSearchColumn > thead  > tr')\r\n          .clone(true)\r\n          .appendTo('#tableSearchColumn > thead')\r\n        $('#tableSearchColumn > thead > tr:eq(1) > th').each(function (i) {\r\n          var title = $(this).text()\r\n          $(this).html('<input type=\"text\" placeholder=\"Search \"' + title + '/>')\r\n  \r\n          $('input', this).on('keyup change', function () {\r\n            if (table.column(i).search() !== this.value) {\r\n              table\r\n                .column(i)\r\n                .search(this.value)\r\n                .draw()\r\n            }\r\n          })\r\n        })\r\n  \r\n       // $('#tableSearchColumn').DataTable().destroy()\r\n        var table = $('#tableSearchColumn').DataTable({\r\n          orderCellsTop: true,\r\n          fixedHeader: true,\r\n                      \r\n            dom: 'Bfrtip',\r\n            buttons: [\r\n              'copy', 'csv', 'pdf', 'print'\r\n            ],\r\n          \r\n        })\r\n      }\r\n    getBoardColumn(sprint_backlog_column_id) {\r\n        for (let id in data.sprint_backlog_columns) {\r\n            if (parseInt(data.sprint_backlog_columns[id].id) === parseInt(sprint_backlog_column_id)) {\r\n                return data.sprint_backlog_columns[id].name\r\n            }\r\n        }\r\n    }\r\n    getSprintName(sprint_id) {\r\n        for (let idx in data.sprints) {\r\n            if (parseInt(data.sprints[idx].id) === parseInt(sprint_id)) {\r\n                return data.sprints[idx].name\r\n            }\r\n        }\r\n    }\r\n    getBoardName(id) {\r\n        for (let idx in organizations[0].boards) {\r\n\r\n            if (parseInt(organizations[0].boards[idx].id) === parseInt(id)) {\r\n                return organizations[0].boards[idx].name\r\n            }\r\n        }\r\n    }\r\n    getDoers(doers) {\r\n        var output = \"\";\r\n        for(let id in doers){\r\n            for(let idx in data.board_users){\r\n                if(doers[id].id === data.board_users[idx].user.id){\r\n                    output += data.board_users[idx].user.first_name+\" \"+data.board_users[idx].user.last_name+\", \";\r\n                }\r\n            }\r\n        }\r\n        output = (output.length > 2)?output.substring(0, output.length - 2): output;\r\n        return output;        \r\n    }\r\n    taskInfo() {\r\n        var rows = this.state.tasks.map((obj, i) => {\r\n            let sgti = (obj.name.length > 0 && obj.name.charAt(0) !== \"_\")?obj.name.substring(0,5):\"\";\r\n\r\n            return <tr key={obj.id}>\r\n                <td>{i + 1}</td>\r\n                <td>{sgti}</td>\r\n                <td>{obj.name}</td>\r\n                <td>{this.getBoardName(obj.board_id)}</td>\r\n                <td>{obj.board_id}</td>\r\n                <td>{JSON.stringify(obj.subtasks)}</td>\r\n                <td>{this.getBoardColumn(obj.sprint_backlog_column_id)}</td>\r\n                <td>{this.getSprintName(obj.sprint_id)}</td>\r\n                <td>{this.getDoers(obj.doers)}</td>\r\n            </tr>\r\n        });\r\n        return rows;\r\n\r\n    }\r\n    render() {\r\n        // console.log(data.tasks);\r\n        /* console.log(common);\r\n         console.log(organizations);*/\r\n\r\n        console.log(this.state)\r\n\r\n\r\n\r\n        return (            \r\n            <div className='table-responsive'>\r\n                Vivify Report\r\n                <table id=\"tableSearchColumn\" className=\"dataTable table table-hover table-bordered\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>#</th>\r\n                            <th>SGTI</th>\r\n                            <th>Tarea</th>\r\n                            <th>Board</th>\r\n                            <th>Board Id</th>\r\n                            <th>SubTasks</th>\r\n                            <th>Status</th>\r\n                            <th>Sprint ID</th>\r\n                            <th>Doers</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.taskInfo()}\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TableroVivify from './components/tableroVivify'\n/*import Tablero from './components/tablero'\nimport Responsible from './components/tablero/Responsible'\nimport Members from './components/tablero/Members'\n*/\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      url: \"\",\n      data: null\n    }\n  }\n  componentWillMount() {\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <img src={logo} className=\"App-logo\" width=\"50\" height=\"50\" alt=\"logo\" />\n        <hr/>\n        <TableroVivify />\n        {/*\n        <hr/>\n        <Tablero />\n        <br/>\n        <div align=\"center\">\n          <Responsible />\n          <br />\n          <br />\n          <Members />\n        </div>\n        <br />\n        <br />*/}\n        \n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      //registration.unregister();\n      registration.register();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}